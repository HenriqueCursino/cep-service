// Code generated by MockGen. DO NOT EDIT.
// Source: api/dto/utils.go

// Package mock is a generated GoMock package.
package mock

import (
	response "cep-service/api/response"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCepFuncs is a mock of CepFuncs interface.
type MockCepFuncs struct {
	ctrl     *gomock.Controller
	recorder *MockCepFuncsMockRecorder
}

// MockCepFuncsMockRecorder is the mock recorder for MockCepFuncs.
type MockCepFuncsMockRecorder struct {
	mock *MockCepFuncs
}

// NewMockCepFuncs creates a new mock instance.
func NewMockCepFuncs(ctrl *gomock.Controller) *MockCepFuncs {
	mock := &MockCepFuncs{ctrl: ctrl}
	mock.recorder = &MockCepFuncsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCepFuncs) EXPECT() *MockCepFuncsMockRecorder {
	return m.recorder
}

// GetBrasilAberto mocks base method.
func (m *MockCepFuncs) GetBrasilAberto(url, cep string, ctx context.Context, responseChannel chan<- response.GetAddressByCepResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBrasilAberto", url, cep, ctx, responseChannel)
}

// GetBrasilAberto indicates an expected call of GetBrasilAberto.
func (mr *MockCepFuncsMockRecorder) GetBrasilAberto(url, cep, ctx, responseChannel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrasilAberto", reflect.TypeOf((*MockCepFuncs)(nil).GetBrasilAberto), url, cep, ctx, responseChannel)
}

// GetBrasilApi mocks base method.
func (m *MockCepFuncs) GetBrasilApi(url, cep string, ctx context.Context, responseChannel chan<- response.GetAddressByCepResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBrasilApi", url, cep, ctx, responseChannel)
}

// GetBrasilApi indicates an expected call of GetBrasilApi.
func (mr *MockCepFuncsMockRecorder) GetBrasilApi(url, cep, ctx, responseChannel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrasilApi", reflect.TypeOf((*MockCepFuncs)(nil).GetBrasilApi), url, cep, ctx, responseChannel)
}

// GetOpenCep mocks base method.
func (m *MockCepFuncs) GetOpenCep(url, cep string, ctx context.Context, responseChannel chan<- response.GetAddressByCepResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetOpenCep", url, cep, ctx, responseChannel)
}

// GetOpenCep indicates an expected call of GetOpenCep.
func (mr *MockCepFuncsMockRecorder) GetOpenCep(url, cep, ctx, responseChannel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenCep", reflect.TypeOf((*MockCepFuncs)(nil).GetOpenCep), url, cep, ctx, responseChannel)
}

// GetViaCep mocks base method.
func (m *MockCepFuncs) GetViaCep(url, cep string, ctx context.Context, responseChannel chan<- response.GetAddressByCepResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetViaCep", url, cep, ctx, responseChannel)
}

// GetViaCep indicates an expected call of GetViaCep.
func (mr *MockCepFuncsMockRecorder) GetViaCep(url, cep, ctx, responseChannel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViaCep", reflect.TypeOf((*MockCepFuncs)(nil).GetViaCep), url, cep, ctx, responseChannel)
}
